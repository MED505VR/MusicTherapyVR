using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Sound.Models
{
    [RealtimeModel()]
    public partial class SynchronizedSoundModel
    {
        [RealtimeProperty(1, true, true)] private bool _playSynchronizedSound;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Sound.Models {
    public partial class SynchronizedSoundModel : RealtimeModel {
        public bool playSynchronizedSound {
            get {
                return _playSynchronizedSoundProperty.value;
            }
            set {
                if (_playSynchronizedSoundProperty.value == value) return;
                _playSynchronizedSoundProperty.value = value;
                InvalidateReliableLength();
                FirePlaySynchronizedSoundDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(SynchronizedSoundModel model, T value);
        public event PropertyChangedHandler<bool> playSynchronizedSoundDidChange;
        
        public enum PropertyID : uint {
            PlaySynchronizedSound = 1,
        }
        
        #region Properties
        
        private ReliableProperty<bool> _playSynchronizedSoundProperty;
        
        #endregion
        
        public SynchronizedSoundModel() : base(null) {
            _playSynchronizedSoundProperty = new ReliableProperty<bool>(1, _playSynchronizedSound);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _playSynchronizedSoundProperty.UnsubscribeCallback();
        }
        
        private void FirePlaySynchronizedSoundDidChange(bool value) {
            try {
                playSynchronizedSoundDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _playSynchronizedSoundProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _playSynchronizedSoundProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.PlaySynchronizedSound: {
                        changed = _playSynchronizedSoundProperty.Read(stream, context);
                        if (changed) FirePlaySynchronizedSoundDidChange(playSynchronizedSound);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _playSynchronizedSound = playSynchronizedSound;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
