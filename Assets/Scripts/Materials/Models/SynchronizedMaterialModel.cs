using UnityEngine;

using Normal.Realtime;
using Normal.Realtime.Serialization;
namespace Materials.Models
{
    [RealtimeModel()]
    public partial class SynchronizedMaterialModel
    {
        [RealtimeProperty(1, true, true)] private Color _color;
        [RealtimeProperty(2, true, true)] private Color _emissionColor;
        [RealtimeProperty(3, true, true)] private bool _isEmissive;
    }
}


/* ----- Begin Normal Autogenerated Code ----- */
namespace Materials.Models {
    public partial class SynchronizedMaterialModel : RealtimeModel {
        public UnityEngine.Color color {
            get {
                return _colorProperty.value;
            }
            set {
                if (_colorProperty.value == value) return;
                _colorProperty.value = value;
                InvalidateReliableLength();
                FireColorDidChange(value);
            }
        }
        
        public UnityEngine.Color emissionColor {
            get {
                return _emissionColorProperty.value;
            }
            set {
                if (_emissionColorProperty.value == value) return;
                _emissionColorProperty.value = value;
                InvalidateReliableLength();
                FireEmissionColorDidChange(value);
            }
        }
        
        public bool isEmissive {
            get {
                return _isEmissiveProperty.value;
            }
            set {
                if (_isEmissiveProperty.value == value) return;
                _isEmissiveProperty.value = value;
                InvalidateReliableLength();
                FireIsEmissiveDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(SynchronizedMaterialModel model, T value);
        public event PropertyChangedHandler<UnityEngine.Color> colorDidChange;
        public event PropertyChangedHandler<UnityEngine.Color> emissionColorDidChange;
        public event PropertyChangedHandler<bool> isEmissiveDidChange;
        
        public enum PropertyID : uint {
            Color = 1,
            EmissionColor = 2,
            IsEmissive = 3,
        }
        
        #region Properties
        
        private ReliableProperty<UnityEngine.Color> _colorProperty;
        
        private ReliableProperty<UnityEngine.Color> _emissionColorProperty;
        
        private ReliableProperty<bool> _isEmissiveProperty;
        
        #endregion
        
        public SynchronizedMaterialModel() : base(null) {
            _colorProperty = new ReliableProperty<UnityEngine.Color>(1, _color);
            _emissionColorProperty = new ReliableProperty<UnityEngine.Color>(2, _emissionColor);
            _isEmissiveProperty = new ReliableProperty<bool>(3, _isEmissive);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _colorProperty.UnsubscribeCallback();
            _emissionColorProperty.UnsubscribeCallback();
            _isEmissiveProperty.UnsubscribeCallback();
        }
        
        private void FireColorDidChange(UnityEngine.Color value) {
            try {
                colorDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireEmissionColorDidChange(UnityEngine.Color value) {
            try {
                emissionColorDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireIsEmissiveDidChange(bool value) {
            try {
                isEmissiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _colorProperty.WriteLength(context);
            length += _emissionColorProperty.WriteLength(context);
            length += _isEmissiveProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _colorProperty.Write(stream, context);
            writes |= _emissionColorProperty.Write(stream, context);
            writes |= _isEmissiveProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.Color: {
                        changed = _colorProperty.Read(stream, context);
                        if (changed) FireColorDidChange(color);
                        break;
                    }
                    case (uint) PropertyID.EmissionColor: {
                        changed = _emissionColorProperty.Read(stream, context);
                        if (changed) FireEmissionColorDidChange(emissionColor);
                        break;
                    }
                    case (uint) PropertyID.IsEmissive: {
                        changed = _isEmissiveProperty.Read(stream, context);
                        if (changed) FireIsEmissiveDidChange(isEmissive);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _color = color;
            _emissionColor = emissionColor;
            _isEmissive = isEmissive;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
